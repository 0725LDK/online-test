<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="goodee.gdj58.online.mapper.StudentMapper">
	
	<!-- 학생 비밀 번호 변경 -->
	<update id="updateStudentPw" parameterType="java.util.Map">
		UPDATE student
		SET student_pw = PASSWORD(#{newPw})
		WHERE student_no = #{studentNo} AND student_pw = PASSWORD(#{oldPw})
	</update>
	
	<!-- 학생 점수 score 테이블에 저장 -->
	<insert id="studentAddScore" parameterType="goodee.gdj58.online.vo.Score" >
		INSERT INTO score(test_no,student_no,score) VALUES (#{testNo},#{studentNo},#{score})
	</insert>
	
	<!-- 학생시험 점수 계산 -->
	<select id="studentCalScore" parameterType="java.util.Map" resultType="int">
		SELECT if(b.score IS NULL,0,sum(b.score)*10) score	
		FROM 
			(SELECT a.exampleIdx exampleIdx
					, a.answer answer
					, a.testNo testNo
					, a.studentNo studentNo
					, if(a.exampleIdx=a.answer,1,0) score
			FROM 
				(SELECT te.test_no testNo
						, te.test_title testTitle
						, qu.question_idx questionIdx
						, qu.question_title questionTitle
						, ex.example_idx exampleIdx
						, ex.example_title exampleTitle
						, ex.example_ox exampleOx
						, pa.student_no studentNo
						, if(pa.answer = NULL,0,pa.answer) answer
				FROM test te 
					INNER JOIN question qu ON te.test_no = qu.test_no
					INNER JOIN example ex ON qu.question_no = ex.question_no
					inner JOIN paper pa ON ex.question_no = pa.question_no
					
				WHERE pa.student_no = #{studentNo}
				)a
			WHERE a.exampleOx = '정답' AND a.testNo = #{testNo}
			)b
		
	</select>
	<!-- 학생 시험 점수
	<select id="studentTestScore" parameterType="int" resultType="int">
		SELECT Count(c.score)*10
		FROM (SELECT if(b.exampleIdx = b.answer, 1,0 ) score
				FROM (SELECT a.questionNo questionNo
							, a.exampleIdx exampleIdx
							, a.exampleOx exampleOx
							, a.answer answer
						FROM (SELECT te.test_no testNo
									, st.student_no studentNo
									, qu.question_no questionNo
									, ex.example_idx exampleIdx
									, ex.example_title exampleTitle
									, ex.example_ox exampleOx
									, pa.answer answer
								FROM test te
									INNER JOIN question qu ON te.test_no = qu.test_no
									INNER JOIN example ex ON qu.question_no = ex.question_no
									INNER JOIN paper pa ON ex.question_no = pa.question_no
									INNER JOIN student st ON pa.student_no = st.student_no
								WHERE st.student_no = #{studentNo}
								) a
						WHERE exampleOx = '정답'
						) b
				) c
		WHERE c.score = 1;
	
	</select> -->
	
	<!-- 학생 시험 제출답안 -->
	<insert id="studentTestPaper" parameterType="goodee.gdj58.online.vo.Paper">
		INSERT INTO paper(student_no,question_no,answer) VALUES (#{studentNo},#{questionNo},#{answer})
	</insert>
	
	<!-- 학생 문제별 보기 리스트 -->
	<select id="selectExampleList" resultType="java.util.Map" parameterType="java.util.Map"><!--resultType 리스트 타입 반환 할때   -->
		SELECT ex.example_idx exampleIdx, ex.example_title exampleTitle
		FROM question qu INNER JOIN example ex ON qu.question_no = ex.question_no
		WHERE test_no = #{testNo};
	</select>
	<!-- 학생 시험 총 수 -->
	<select id="questionTotalCount" parameterType="String" resultType="int">
		SELECT
			COUNT(*) count
		FROM question
		<where>
			<if test="searchWord != null || searchWord != '' ">
				question_title LIKE CONCAT('%',#{searchWord},'%')
			</if>
		</where>
	</select>
	<!-- 학생 시험별문제 리스트 -->
	<select id="selectQuestionList" resultType="java.util.Map" parameterType="java.util.Map"><!--resultType 리스트 타입 반환 할때   -->
		SELECT
			a.test_no testNo
			, a.test_title testTitle
			, a.test_date testDate
			, a.question_no questionNo
			, a.question_idx questionIdx
			, a.question_title questionTitle
			, MAX(if(a.example_idx = 1, a.example_title, 0)) exampleIdx1
			, MAX(if(a.example_idx = 2, a.example_title, 0)) exampleIdx2
			, MAX(if(a.example_idx = 3, a.example_title, 0)) exampleIdx3
			, MAX(if(a.example_idx = 4, a.example_title, 0)) exampleIdx4
			, MAX(if(a.example_idx = 1, a.example_ox, 0)) answer1
			, MAX(if(a.example_idx = 2, a.example_ox, 0)) answer2
			, MAX(if(a.example_idx = 3, a.example_ox, 0)) answer3
			, MAX(if(a.example_idx = 4, a.example_ox, 0)) answer4			
		FROM
			(SELECT
				t.test_no
				, t.test_title
				, t.test_date
				, q.question_idx
				, q.question_no
				, q.question_title
				, e.example_idx
				, e.example_title
				, e.example_ox
			FROM test t
				INNER JOIN question q
				ON t.test_no = q.test_no
				INNER JOIN example e
				ON q.question_no = e.question_no
			WHERE t.test_no = #{testNo}
			ORDER BY q.question_idx ASC, example_idx ASC) a
		GROUP BY a.question_idx
	</select>
	
	<!-- 학생 시험 총 수 -->
	<select id="testTotalCount" parameterType="String" resultType="int">
		SELECT
			COUNT(*) count
		FROM test
		<where>
			<if test="searchWord != null || searchWord != '' ">
				test_title LIKE CONCAT('%',#{searchWord},'%')
			</if>
		</where>
	</select>
	
	<!-- 학생 시험 리스트 -->
	<select id="selectTestList" resultType="java.util.Map" parameterType="java.util.Map">
		SELECT a.testNo
			, a.testTitle
			, a.testDate
			, MAX(if(a.studentNo = #{studentNo}, a.score, 0)) score
		FROM (SELECT te.test_no testNo
					, te.test_title testTitle
					, te.test_date testDate
					, if(sc.student_no IS NULL, 0, sc.student_no) studentNo
					, if(sc.score IS NULL,0,sc.score) score
				FROM test te 
					LEFT OUTER JOIN score sc ON te.test_no = sc.test_no) a
		WHERE a.testDate >= CURDATE()
		GROUP BY testNo
		ORDER BY testNo
	</select>
	<!-- 학생 끝난시험 리스트 -->
	<select id="selectEndTestList" resultType="java.util.Map" parameterType="int">
		SELECT te.test_no testNo
				, te.test_title testTitle
				, te.test_date testDate
				, sc.score score
		FROM test te
			INNER JOIN score sc ON te.test_no = sc.test_no
		WHERE te.test_date &#60;= CURDATE() AND sc.student_no = #{studentNo}
	</select>
	
	
	<!-- 학생 로그인 -->
	<select id="login" parameterType="goodee.gdj58.online.vo.Student" resultType="goodee.gdj58.online.vo.Student">
		SELECT
			student_no studentNo
			, student_id studentId
			, student_name studentName
		FROM student
		WHERE student_id = #{studentId} AND student_pw = PASSWORD(#{studentPw}) 
	</select>

</mapper>